#!/usr/bin/env python2
import math, os
from csv import DictReader
from argparse import ArgumentParser, FileType
from sys import stdout, stderr, exit

class Colours:
    LOW = '\033[1;31m'
    MED = '\033[1;33m'
    NAN = '\033[0;90m'
    END = '\033[0m'

class ParameterReadException(Exception):
    def __init__(self, pname):
        self.pname = pname

def calculateESS(data, burninPerc, thin=None):
    """Effective sample size, as computed by BEAST Tracer, stolen from biopy."""

    burnin = int(math.floor(burninPerc*len(data)/100.0))
    data = data[burnin:]

    if thin != None:
        data = data[0:len(data):max(len(data)/thin,1)]

    samples = len(data)

    assert len(data) > 1,"no stats for short sequences"

    maxLag = min(samples//3, 1000)

    gammaStat = [0,]*maxLag

    varStat = 0.0

    dataMean = sum(data)/float(len(data))
    normalizedData = map(lambda el: el - dataMean, data)

    for lag in range(maxLag) :
        v1 = normalizedData[:samples-lag]
        v2 = normalizedData[lag:]
        v = [a*b for a,b in zip(v1,v2)]
        gammaStat[lag] = sum(v) / len(v)

        if lag == 0 :
            varStat = gammaStat[0]
        elif lag % 2 == 0 :
            s = gammaStat[lag-1] + gammaStat[lag]
            if s > 0 :
                varStat += 2.0*s
            else:
                break

    if varStat > 0:
        return samples * gammaStat[0] / varStat
    else:
        return float("nan")

def colourizedString(string, ess, colours=False):
    """Colour-codes a string according to the given ess value."""

    if colours:
        if ess < 100.0:
            col = Colours.LOW
        elif ess < 200.0:
            col = Colours.MED
        elif math.isnan(ess):
            col = Colours.NAN
        else:
            col = ""

        return col + string + Colours.END

    else:
        return string

def formatESSList(essVals, colWidths, cWidth=None, colours=False):
    """Construct a string representing a record in the ESS table."""

    essString = ""
    charCount = 0
    for i in range(len(essVals)):
        ess = essVals[i]
        colWidth = colWidths[i]

        if i>0:
            essString += " "
            charCount += 1

        thisString = "{0:0.1f}".format(ess).ljust(colWidth)[:colWidth]
        if cWidth != None and charCount + len(thisString) > cWidth:
            thisString = thisString[:(cWidth - charCount)]
            essString += colourizedString(thisString, ess, colours=colours)
            return essString

        essString += colourizedString(thisString, ess, colours=colours)
        charCount += len(thisString)

    return essString

def getESSChar(ess, colours=False):
    """Retrieve a (coloured) single-character representation of an ESS value."""
    
    if ess < 100.0:
        return colourizedString("!", ess, colours=colours)
    elif ess < 200.0:
        return colourizedString("*", ess, colours=colours)
    elif math.isnan(ess):
        return colourizedString("_", ess, colours=colours)

    return colourizedString("+", ess, colours=colours)

def formatESSListKompressed(essVals, colours=False):
    """Construct a short string representing a record in the ESS table."""
    
    essString = ""
    for i in range(len(essVals)):
        essString += getESSChar(essVals[i], colours=colours)

    minESS = min(filter(lambda x: not math.isnan(x), essVals))

    essString += " " + colourizedString("{0:0.1f}".format(minESS).ljust(10)[:10], minESS, colours=colours)

    return essString

def formatMinESS(minESS, minParam, colours=False):
    """Construct a string representing the minimum ESS value in a log file."""

    return colourizedString("{0:0.1f} ({1:s})".format(minESS, minParam),
                            minESS, colours=colours)

def processFieldNames(fieldnames, fnamewidth, cWidth, args):
    """Extract names of parameters from field names and print header if required."""

    params = filter(lambda f: len(f)>0
                    and f != args.sampleHeader
                    and (args.omit == None or args.omit.lower() not in f.lower()),
                    fieldnames)

    colWidths = [max(10, len(p)) for p in params]

    if (not args.kompress) and (not args.min):
        header = "LOG".ljust(fnamewidth) + " "
        header += " ".join([params[i].ljust(colWidths[i])[:colWidths[i]] for i in range(len(params))])

        if args.cut:
            print header[:cWidth]
        else:
            print header

        stdout.flush()
    

    if args.kompress and (stdout.isatty() or cWidth != None):
        entryWidth = fnamewidth + 1 + len(params) + 11
        entriesPerLine = cWidth/entryWidth
    else:
        entriesPerLine = None

    return params, colWidths, entriesPerLine


def getLogFileESSVals(rdr, params, args):
    """Retrieve ESS values for params from log file CSV reader rdr."""

    data = {}
    
    for param in params:
        data[param] = []

    for row in rdr:
        try:
            for param in params:
                data[param].append(float(row[param]))
        except KeyError as e:
            raise ParameterReadException(e.message)

    essVals = []
    for param in params:
        essVals.append(calculateESS(data[param], args.burnin, thin=args.thin))

    return essVals

def processCommandLine():
    """Retrieve and process command line arguments."""
    
    parser = ArgumentParser(description="Produce table of ESS values from one or more BEAST log files.",
            epilog="""ESS values smaller than 100 are considered very low and are highlited in red.
            Values between 100 and 200 are also fairly low and are highlighted in yellow.""")
    parser.add_argument("logFileNames", metavar='log', type=str, nargs='+',
            help="A BEAST parameter log file.")
    parser.add_argument("-d", "--delimiter", dest="delim", type=str, metavar="string", default="\t",
            help="Delimiter used to separate values of log file. (Default is tab-delimited.)")
    parser.add_argument("-b", "--burnin", type=float, metavar="percentage", default=10.0,
            help="Percentage of each log to skip to account for burn-in.")
    parser.add_argument("-s", "--sample", dest="sampleHeader", type=str, metavar="string", default="Sample",
            help="Name of samples/iterations column (case sensitive).")
    parser.add_argument("-c", "--cut", action='store_true',
            help="Cut unkompressed output to width of terminal window.")
    parser.add_argument("-w", "--width", type=int, metavar="ncols",
            help="Width to be used for terminal width.  Helpful when output is not a tty.")
    parser.add_argument("-n", "--no-colours", action='store_true',
            help="Disable colour output.")
    parser.add_argument("-k","--kompress", action='store_true',
            help="Represent each ESS value with a single coloured character.")
    parser.add_argument("-m","--min", action='store_true',
            help="Only display minimum (non-NaN) ESS over all parameters for each log.")
    parser.add_argument("-t","--thin", type=int, metavar="int",
            help="Thin the data to at most this many evenly-spaced samples before computing ESS.")
    parser.add_argument("-o","--omit", type=str, metavar="string",
            help="Omit fields with headers containing given string. Case insensitive.")

    return parser.parse_args()
    

### Main ###

def main():

    args = processCommandLine();

    fnames = args.logFileNames
    fnamewidth = max([len(fname) for fname in fnames])

    # Disable cutting and colours if stdout isn't a terminal
    if not stdout.isatty():
        args.cut = False
        args.no_colours = True

    if args.width == None:
        if stdout.isatty():
            cHeight, cWidth = os.popen('stty size', 'r').read().split()
            cWidth = int(cWidth)
        else:
            cWidth = None
    else:
        cWidth = args.width

    if args.kompress:
        thisLineIndex = 0

    params = None
    colWidths = None
    thisEntry = 0
    for logFileName in args.logFileNames:
        with open(logFileName,"r") as log:
            stdout.write(log.name.ljust(fnamewidth) + " ")

            rdr = DictReader(filter(lambda line: not line.strip().startswith("#"), log), delimiter=args.delim)
            if params == None:
                params, colWidths, entriesPerLine = processFieldNames(rdr.fieldnames,
                                                                      fnamewidth, cWidth,
                                                                      args)

            essVals = getLogFileESSVals(rdr, params, args)

            if args.min:
                # Print minimum ESS value

                minParam, minESS = min(filter(lambda x: not math.isnan(x[1]),
                                              zip(params, essVals)), key=lambda x: x[1])

                stdout.write(formatMinESS(minESS, minParam, colours=not args.no_colours))
                stdout.write("\n")

            elif args.kompress:
                # Print "kompressed" representation of all ESS values
                
                if (stdout.isatty() or cWidth != None) and thisEntry > 0:
                    stdout.write(" ")

                stdout.write(formatESSListKompressed(essVals, colours=not args.no_colours))

                if stdout.isatty() or cWidth != None:
                    thisEntry += 1
                    if thisEntry == entriesPerLine:
                        thisEntry = 0
                        stdout.write("\n")
                else:
                    stdout.write("\n")

            else:
                # Print full representation of all ESS values
                
                if args.cut:
                    print formatESSList(essVals, colWidths, cWidth - fnamewidth - 1, colours=not args.no_colours)
                else:
                    print formatESSList(essVals, colWidths, colours=not args.no_colours)

            stdout.flush()

    if args.kompress and stdout.isatty() and thisEntry < entriesPerLine:
        print

# Call main from here, catching KeyboardInterrupt to
# avoid unsightly stack traces.

if __name__ == '__main__':

    try:
        main()
    except KeyboardInterrupt:
        exit(1)
    except ParameterReadException as e:
        stderr.write("\nCould not find parameter " + e.pname +
                " in log file.  Aborting.\n")

